module.aws_ec2_public_docker_react_ec2.data.aws_ami.ubuntu: Reading...
data.aws_ami.ubuntu_ami: Reading...
module.aws_ec2_public_docker_springboot_ec2.data.aws_ami.ubuntu: Reading...
module.aws_ec2_public_docker_springboot_ec2.data.aws_ami.ubuntu: Read complete after 0s [id=ami-0e735aba742568824]
module.aws_ec2_public_docker_react_ec2.data.aws_ami.ubuntu: Read complete after 0s [id=ami-0e735aba742568824]
data.aws_ami.ubuntu_ami: Read complete after 0s [id=ami-0e735aba742568824]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_route_table.public-route will be created
  + resource "aws_route_table" "public-route" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-public-route"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all         = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-public-route"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.to-public-a will be created
  + resource "aws_route_table_association" "to-public-a" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.to-public-c will be created
  + resource "aws_route_table_association" "to-public-c" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.aws_ec2_public_docker_react_ec2.aws_instance.instance-template will be created
  + resource "aws_instance" "instance-template" {
      + ami                                  = "ami-0e735aba742568824"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "tf-mdc-test-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-ec2-react"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all                             = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-ec2-react"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.aws_ec2_public_docker_springboot_ec2.aws_instance.instance-template will be created
  + resource "aws_instance" "instance-template" {
      + ami                                  = "ami-0e735aba742568824"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "tf-mdc-test-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-ec2-was"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all                             = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-ec2-was"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.aws_key_pair.aws_key_pair.ssh will be created
  + resource "aws_key_pair" "ssh" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "tf-mdc-test-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = (known after apply)
      + tags            = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-key"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all        = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-key"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
    }

  # module.aws_key_pair.local_sensitive_file.pem_file will be created
  + resource "local_sensitive_file" "pem_file" {
      + content              = (sensitive value)
      + directory_permission = "0700"
      + file_permission      = "0700"
      + filename             = "./tf-mdc-test-key.pem"
      + id                   = (known after apply)
    }

  # module.aws_key_pair.tls_private_key.ssh will be created
  + resource "tls_private_key" "ssh" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + private_key_pem_pkcs8         = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 4096
    }

  # module.aws_public_subnet_a.aws_subnet.subnet-template will be created
  + resource "aws_subnet" "subnet-template" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-northeast-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "30.30.11.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-subnet-public-a"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all                                       = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-subnet-public-a"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.aws_public_subnet_c.aws_subnet.subnet-template will be created
  + resource "aws_subnet" "subnet-template" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-northeast-2c"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "30.30.12.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-subnet-public-c"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all                                       = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-subnet-public-c"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.aws_sg_default.aws_security_group.sg-template will be created
  + resource "aws_security_group" "sg-template" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow ICMP"
              + from_port        = -1
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "icmp"
              + security_groups  = []
              + self             = false
              + to_port          = -1
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "tf-mdc-test-an2p-sg-ssh-default"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-sg-default"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all               = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-sg-default"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + vpc_id                 = (known after apply)
    }

  # module.aws_sg_react_web.aws_security_group.sg-template will be created
  + resource "aws_security_group" "sg-template" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow ICMP"
              + from_port        = -1
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "icmp"
              + security_groups  = []
              + self             = false
              + to_port          = -1
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow TCP"
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3000
            },
        ]
      + name                   = "tf-mdc-test-an2p-sg-22-3000"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-sg-web"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all               = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-sg-web"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + vpc_id                 = (known after apply)
    }

  # module.aws_sg_was.aws_security_group.sg-template will be created
  + resource "aws_security_group" "sg-template" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow ICMP"
              + from_port        = -1
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "icmp"
              + security_groups  = []
              + self             = false
              + to_port          = -1
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Allow http"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = "tf-mdc-test-an2p-sg-22-8080"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-sg-was"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all               = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-sg-was"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + vpc_id                 = (known after apply)
    }

  # module.aws_vpc.aws_vpc.vpc-template will be created
  + resource "aws_vpc" "vpc-template" {
      + arn                                  = (known after apply)
      + cidr_block                           = "30.30.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-vpc"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all                             = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-vpc"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
    }

  # module.aws_vpc_network.aws_eip.eip-template will be created
  + resource "aws_eip" "eip-template" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # module.aws_vpc_network.aws_internet_gateway.igw-template[0] will be created
  + resource "aws_internet_gateway" "igw-template" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-igw-nat-sunet"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-igw-nat-sunet"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + vpc_id   = (known after apply)
    }

  # module.aws_vpc_network.aws_nat_gateway.ngw-template will be created
  + resource "aws_nat_gateway" "ngw-template" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags                 = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-igw-nat-sunet"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
      + tags_all             = {
          + "Environment" = "prd"
          + "Name"        = "tf-mdc-test-an2p-igw-nat-sunet"
          + "Owner"       = "seungsuk.ryoo@bespinglobal.com"
          + "Project"     = "tf-mdc-test"
          + "Team"        = "ACA"
        }
    }

Plan: 17 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + react_public_ip      = (known after apply)
  + springboot_public_ip = (known after apply)
  + ssh_private_key_pem  = (sensitive value)
  + ssh_public_key_pem   = (sensitive value)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
